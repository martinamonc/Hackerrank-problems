WARMUP
SOLVE ME FIRST
def solveMeFirst(a,b):
    return(a+b)

SIMPLE ARRAY SUM
def simpleArraySum(ar):
    sum= 0
    for i in ar:
        sum+=i
    return sum

COMPARE THE TRIPLETS
def compareTriplets(a, b):
    ac= 0
    bc= 0
    for i in range(len(a)):
        if a[i]>b[i]:
            ac+=1
        elif a[i]<b[i]:
            bc+=1
    return ac, bc

A VERY BIG SUM
def aVeryBigSum(ar):
    sums= 0
    for a in ar:
        sums+=a
    return sums

DIAGONAL DIFFERENCE
def diagonalDifference(arr):
    sum1=0
    sum2= 0
    i=0
    j=0
    r= 0
    nn= n-1
    for a in arr:
        sum1+=arr[i][j]
        i+=1
        j+=1
    for a in arr:
        sum2+=arr[r][nn]
        r+=1
        nn-=1
    return (abs(sum1-sum2))

PLUS MINUS
def plusMinus(arr):
    countp=0
    countn=0
    countz=0
    for a in arr:
        if a==0:
            countz+=1
        elif a>0:
            countp+=1
        elif a<0:
            countn+=1
    rz= "{0:.6f}".format(countz/n)
    rp= "{0:.6f}".format(countp/n)
    rn= "{0:.6f}".format(countn/n)
    for r in [rp, rn, rz]:
        print (r)

STAIRCASE
def staircase(n):
    stair= []
    for i in range(1,n+1):
        s= n-i
        st= (' '*s)+('#'*i)
        stair.append(st)
    for ss in stair:
        print (ss)

BIRTHDAY CAKE CANDLES
import collections
def birthdayCakeCandles(candles):
    count= collections.Counter(candles)
    m= max(candles)
    return count[m]

MINI-MAX SUM
def aVeryBigSum(ar):
    sums= 0
    for a in ar:
        sums+=a
    return sums

TIME CONVERSION
def timeConversion(s):
    hh, mm, ss= s.split(':')
    if 'AM' in ss:
        if hh=='12':
            hh1= '00'
        else:
            hh1==hh
        ss= ss.replace('AM', '')
    elif 'PM' in ss:
        if hh=='12':
            hh1= '12'
        else:
            hh1= int(hh)+12
        ss= ss.replace('PM', '')
    time= [str(hh1), mm, ss]
    return ':'.join(time)

SORTING
INTRO TO TUTORIAL CHALLENGES
def introTutorial(V, arr):
    ind= arr.index(V)
    return ind

RUNNING TIME OF ALGORITHMS
def runningTime(arr):
    z=0
    if arr== (sorted(arr)):
        return (0)    
    else:
        for i in range(1,len(arr)):
            x=arr[i]
            for j in range(i):
                if arr[j]>x:
                    (arr[i],arr[j])=(arr[j],arr[i])
                    z+=1
        return z

CLOSEST NUMBERS
def closestNumbers(arr):
    count= {}
    couples= []
    for i in range(len(arr)):
        succ= i+1 
        0<succ<=len(arr)
        sarr= sorted(arr)
        a1, a2= sarr[i], sarr[succ]
        d= a2-a1
        k= tuple([a1,a2])
        count[k]= d
    return count.keys()

FIND THE MEDIAN
def findMedian(arr):
    k= ((n+1)//2)-1
    sarr= sorted(arr)
    return (sarr[k])

INSERTION SORT
def insertionSort1(n, arr):
    sarr= sorted(arr)
    i=-1
    lst=[]
    for a in arr:
        if arr[i]!=sarr[i]:
            arr[i]=sarr[i]
            print (' '.join(map(str, arr)))
            i+=-1  

BIG SORTING
def bigSorting(unsorted):
    unsorted= list(map(int, unsorted))
    SORT= sorted(unsorted)
    SORTT= list(map(str, SORT))
    return SORTT

COUNTING SORT 1
def countingSort(arr):
    sarr= sorted(arr)
    counter= collections.Counter(sarr)
    ran= list(range(0, 100))
    count= []
    for r in ran:
        count.append(counter[r])
    return ''.join(list(map(str, count)))

COUNTING SORT 2
def countingSort(arr):
    sarr= sorted(arr)
    return (sarr)

CORRECTNESS AND THE LOOP INVARIANT
def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key

QUICKSORT1
def quickSort(arr):
    brr= []
    crr= []
    drr= [arr[0]]
    for i in range(len(arr)):    
        if arr[i]<arr[0]:
            brr.append(arr[i])
        elif arr[i]>arr[0]:
            crr.append(arr[i])
    rr= list(map(str, (brr + drr + crr)))
    return rr

STRINGS
CAMELCASE
def camelcase(s):
    count=0
    for l in s:
        if l.isupper():
            count+=1
    return (count+1)

MARS EXPLORATION
def marsExploration(s):
    count=0
    l= wrap(s, 3)
    for s in l:
        if s!='SOS':
            count+=1
    return count

PANGRAMS
def pangrams(s):
    ss= set(s.lower())
    ss.discard(" ")
    if len(ss)==26:
        return ('pangram')
    else:
        return ('not pangram')
ALTERNATING CHARACTERS
def alternatingCharacters(s):
    count=0
    ss=list(s)
    for i in range(len(ss)-1):
        if ss[i]=="A":
            if ss[i+1]=="A":
                count+=1
            else:
                continue
        elif ss[i]=="B":
            if ss[i+1]=="B":
                count+=1
            else:
                continue
    return count

STRONG PASSWORD
def minimumNumber(n, password):
    count= 0
    numbers = list("0123456789".split())
    lower_case = list("abcdefghijklmnopqrstuvwxyz".split())
    upper_case = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ".split())
    special_characters = list("!@#$%^&*()-+".split())
    if n<6:
        return (6-n)
    else:
        for l in password:
            if l not in numbers:
                count+=1
            if l not in lower_case:
                count+=1
            if l not in upper_case:
                count+=1
            if l not in special_characters:
                count+=1
        for l in password:
            if l in numbers:
                continue
            elif l in lower_case:
                continue
            elif l in upper_case:
                continue
            elif l in special_characters:
                continue
        
        return (count)
